package railo.runtime.db.driver.state;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import railo.runtime.PageContextImpl;
import railo.runtime.db.debug.DebugQuery;
import railo.runtime.db.driver.ConnectionProxy;
import railo.runtime.db.driver.StatementProxy;
import railo.runtime.engine.ThreadLocalPageContext;

public class StateStatement extends StatementProxy {

	public StateStatement(ConnectionProxy conn, Statement stat) {
		super(conn, stat);
	}
	


	@Override
	public boolean execute(String sql) throws SQLException {
		PageContextImpl pc = (PageContextImpl) ThreadLocalPageContext.get();
		if(pc==null) return stat.execute(sql);
		try {
			setActiveStatement(pc,stat,sql);
			 return stat.execute(sql);
		}
		finally {
			pc.releaseActiveQuery();
		}
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		PageContextImpl pc = (PageContextImpl) ThreadLocalPageContext.get();
		if(pc==null) return stat.execute(sql,autoGeneratedKeys);
		try {
			setActiveStatement(pc,stat,sql);
			 return stat.execute(sql,autoGeneratedKeys);
		}
		finally {
			pc.releaseActiveQuery();
		}
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		PageContextImpl pc = (PageContextImpl) ThreadLocalPageContext.get();
		if(pc==null) return stat.execute(sql,columnIndexes);
		try {
			setActiveStatement(pc,stat,sql);
			return stat.execute(sql,columnIndexes);
		}
		finally {
			pc.releaseActiveQuery();
		}
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		PageContextImpl pc = (PageContextImpl) ThreadLocalPageContext.get();
		if(pc==null) return stat.execute(sql,columnNames);
		try {
			setActiveStatement(pc,stat,sql);
			return stat.execute(sql,columnNames);
		}
		finally {
			pc.releaseActiveQuery();
		}
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		PageContextImpl pc = (PageContextImpl) ThreadLocalPageContext.get();
		if(pc==null) return stat.executeQuery(sql);
		try {
			setActiveStatement(pc,stat,sql);
			return stat.executeQuery(sql);
		}
		finally {
			pc.releaseActiveQuery();
		}
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		PageContextImpl pc = (PageContextImpl) ThreadLocalPageContext.get();
		if(pc==null) return stat.executeUpdate(sql);
		try {
			setActiveStatement(pc,stat,sql);
			return stat.executeUpdate(sql);
		}
		finally {
			pc.releaseActiveQuery();
		}
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		PageContextImpl pc = (PageContextImpl) ThreadLocalPageContext.get();
		if(pc==null) return stat.executeUpdate(sql,autoGeneratedKeys);
		try {
			setActiveStatement(pc,stat,sql);
			return stat.executeUpdate(sql,autoGeneratedKeys);
		}
		finally {
			pc.releaseActiveQuery();
		}
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		PageContextImpl pc = (PageContextImpl) ThreadLocalPageContext.get();
		if(pc==null) return stat.executeUpdate(sql,columnIndexes);
		try {
			setActiveStatement(pc,stat,sql);
			return stat.executeUpdate(sql,columnIndexes);
		}
		finally {
			pc.releaseActiveQuery();
		}
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		PageContextImpl pc = (PageContextImpl) ThreadLocalPageContext.get();
		if(pc==null) return stat.executeUpdate(sql,columnNames);
		try {
			setActiveStatement(pc,stat,sql);
			return stat.executeUpdate(sql,columnNames);
		}
		finally {
			pc.releaseActiveQuery();
		}
	}

	protected void setActiveStatement(PageContextImpl pc,Statement stat, String sql) {
		pc.setActiveQuery(new DebugQuery(sql,System.currentTimeMillis()));
	}

}
